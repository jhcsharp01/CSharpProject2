일반 C#
class 클래스명
{
    필드 값;
    
    생성자;
     >>   클래스명() 
     >> 오버로딩을 이용해 수정한 생성자 == 클래스명(필드와 관련된 매개변수)
	ex) Monster(string name, int level)
    메소드;
}
================================================================================
유니티  C#
1. 직렬화(Serialize)
    >> 클래스를 대상으로 직렬화
         System의 경우는 using System;을 사용할 경우 안써도 됩니다.
          [System.Serializable]
          public class 클래스명{}
   >> private 필드에 대한 직렬화
          [SerializeField] private int age;

2. 코루틴(Coroutine)
    1.   IEnumerator 형태의 함수 설계를 진행해 StartCoroutine() 명령어로 실행을 진행합니다.
    2.   IEnumerator는 열거형 객체로 yield를 포함한 return 값을 전달해줍니다.
    3.   yield return new WaitForSeconds(초 단위);를 통해 몇 초 뒤에 다시 작업을 진행하도록 설계할 수 있습니다.
    4.   StopCoroutine()을 통해 코루틴 작동을 중단하는 방법도 존재합니다.

3. 스크립터블 오브젝트
   데이터를 오브젝트처럼 사용할 수 있는 유니티의 기능 중 하나입니다.
   유니티의 Assets 위치에 데이터를 저장해 유니티를 종료해도 데이터가 내부에 남을 수 있도록 작업할 수 있습니다.
   유니티의 데이터베이스 작업을 위한 firebase 연동이나 json 파일 , csv 등과 같이 데이터를 저장하는 용도로 많이 사용되는 기능 중 하나입니다.










